<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Ministere;

/**
 * UniteOrganisationnelleRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UniteOrganisationnelleRepository extends \Doctrine\ORM\EntityRepository
{
    public function supprimerReferentiel(Ministere $ministere)
    {
        $this->createQueryBuilder('u')->update()->set('u.supprime', 1)
        ->where('u.ministere = :MINISTERE')
        ->setParameter('MINISTERE', $ministere)
        ->getQuery()->execute();
    }

    public function getOrganisation(Ministere $ministere, $avecSupprimes = false)
    {
        $qb = $this->createQueryBuilder('u');
        $qb->where('u.ministere = :MINISTERE')
        ->indexBy('u', 'u.code')
        ->setParameter('MINISTERE', $ministere)
        ->addOrderBy('u.libelle');

        // En cas de récupération des UO supprimées aussi
        if (!$avecSupprimes) {
            $qb->andWhere('u.supprime = :SUPPRIME')
            ->setParameter('SUPPRIME', 0);
        }

        return $qb->getQuery()->getResult();
    }

    public function getUnitesOrganisationnellesSansPerimetreBrhp(Ministere $ministere)
    {
        $qb = $this->createQueryBuilder('u');
        $qb->where('u.ministere = :MINISTERE')
        ->setParameter('MINISTERE', $ministere)
        ->andWhere('u.supprime = :SUPPRIME')
         ->andWhere('u.perimetreBrhp is null')
        ->setParameter('SUPPRIME', 0)
        ->addOrderBy('u.libelle');

        return $qb->getQuery()->getResult();
    }

    public function getUniteOrganisationnelle(Ministere $ministere, $code)
    {
        $qb = $this->createQueryBuilder('uo');
        $qb->where('uo.ministere = :MINISTERE')
        ->andWhere('uo.code = :CODE')
        ->setParameter('MINISTERE', $ministere)
        ->setParameter('CODE', $code)
        ->addOrderBy('uo.libelle');

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function dataTableServerProcessing(Ministere $ministere, $search, $page = 0, $max = null, $getResult = true, $columnOrder = 1, $dirOrder = 'asc')
    {
        $orders = array(
                'uo.code',
                'uo.libelle',
        );

        $qb = $this->createQueryBuilder('uo');

        $qb->where('uo.ministere = :MINISTERE')
        ->andWhere('uo.supprime = :SUPPRIME')
        ->setParameter('MINISTERE', $ministere)
        ->setParameter('SUPPRIME', 0);

        // recherches
        if ($search) {
            $search = trim($search);

            $orX = $qb->expr()->orX();
            $conditionsLike = array();

            foreach ($orders as $colonne) {
                $conditionsLike[] = $qb->expr()->like($colonne, ':search');
            }

            $orX->addMultiple($conditionsLike);

            $qb->andWhere($orX);

            $qb->setParameter('search', '%'.$search.'%');
        }

        // ordres
        $qb->orderBy($orders[$columnOrder], $dirOrder);

        // pagination
        if ($max) {
            $preparedQuery = $qb->getQuery()
            ->setMaxResults($max)
            ->setFirstResult($page * $max);
        } else {
            $preparedQuery = $qb->getQuery();
        }

        return $getResult ? $preparedQuery->getResult() : $preparedQuery;
    }

    public function getNbUnitesOrganisationnelles(Ministere $ministere)
    {
        $qb = $this->createQueryBuilder('uo');
        $qb->select('COUNT(uo)')
        ->where('uo.ministere = :MINISTERE')
        ->andWhere('uo.supprime = :SUPPRIME')
        ->setParameter('MINISTERE', $ministere)
        ->setParameter('SUPPRIME', 0);

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function countUnitesOrganisationnelles(Ministere $ministere, $search = null)
    {
        $qb = $this->createQueryBuilder('uo');
        $qb->select('count(uo)');

        $qb->where('uo.ministere = :MINISTERE')
        ->andWhere('uo.supprime = :SUPPRIME')
        ->setParameter('MINISTERE', $ministere)
        ->setParameter('SUPPRIME', 0);

        // recherches
        if ($search) {
            $search = trim($search);

            $orX = $qb->expr()->orX();
            $conditionsLike = array();

            $conditionsLike[] = $qb->expr()->like('uo.code', ':search');
            $conditionsLike[] = $qb->expr()->like('uo.libelle', ':search');

            $orX->addMultiple($conditionsLike);

            $qb->andWhere($orX);

            $qb->setParameter('search', '%'.$search.'%');
        }

        return $qb->getQuery()->getSingleScalarResult();
    }
}

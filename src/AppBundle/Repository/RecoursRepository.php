<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Campagne;
use AppBundle\Entity\Perimetre;
use AppBundle\Entity\CampagnePnc;
use AppBundle\Entity\PerimetreRlc;
use AppBundle\Entity\CampagneRlc;
use AppBundle\Entity\PerimetreBrhp;
use AppBundle\Entity\CampagneBrhp;
use AppBundle\Entity\Agent;

/**
 * RecoursRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RecoursRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Calcul d'indicateurs sur les recours.
     *
     * @param Campagne  $campagne
     * @param Perimetre $perimetre
     * @param string    $typeRecours
     * @param Agent     $shd
     * @param Agent     $ah
     * @param bool      $nbCrepEnRecours : pour avoir le nombre de CREP en mention de recours
     *
     * @throws \Exception
     *
     * @return number
     */
    public function getNbRecours(Campagne $campagne, Perimetre $perimetre = null, $typeRecours = null, Agent $shd = null, Agent $ah = null, $nbCrepEnRecours = false)
    {
        if ($shd && $ah) {
            throw new \Exception('Appel incorrect SHD ou AH');
        }

        $qb = $this->createQueryBuilder('recours');

        if ($nbCrepEnRecours) {
            $qb->select('COUNT(DISTINCT crep)');
        } else {
            $qb->select('COUNT(recours)');
        }

        $qb->join('recours.crep', 'crep')
            ->join('crep.agent', 'agent');

        /* @var $campagne CampagnePnc */
        if ($campagne instanceof CampagnePnc) {
            $qb->andWhere('agent.campagnePnc = :CAMPAGNE');

            // Si le PNC fait un filtre pour avoir des stats sur un périmètre RLC
            /* @var $perimetre PerimetreRlc */
            if ($perimetre) {
                $qb->leftJoin('agent.campagneRlc', 'campagneRlc')
                ->andWhere('campagneRlc.perimetreRlc = :PERIMETRE_RLC')
                ->setParameter('PERIMETRE_RLC', $perimetre);
            }

            /* @var $campagne CampagneRlc */
        } elseif ($campagne instanceof CampagneRlc) {
            $qb->andWhere('agent.campagneRlc = :CAMPAGNE');

            // Si le RLC fait un filtre pour avoir des stats sur un périmètre BRHP
            /* @var $perimetre PerimetreBrhp */
            if ($perimetre) {
                $qb->leftJoin('agent.campagneBrhp', 'campagneBrhp')
                ->andWhere('campagneBrhp.perimetreBrhp = :PERIMETRE_BRHP')
                ->setParameter('PERIMETRE_BRHP', $perimetre);
            }

            /* @var $campagne CampagneBrhp */
        } elseif ($campagne instanceof CampagneBrhp) {
            $qb->andWhere('agent.campagneBrhp = :CAMPAGNE');

            if ($shd) {
                $qb->andWhere('agent.shd = :SHD')
                ->setParameter('SHD', $shd);
            } elseif ($ah) {
                $qb->andWhere('agent.ah = :AH')
                ->setParameter('AH', $ah);
            }
        }

        // Récupérer les recours hiérarchique, en CAP ou au TA qui ne sont pas encore validés
        if (null !== $typeRecours) {
            $qb->andWhere('recours.type = :TYPE')
               ->andWhere('recours.decisionPriseEnCompte = 0 OR recours.decisionPriseEnCompte is NULL ')
               ->setParameter('TYPE', $typeRecours);
        }

        $qb->setParameter('CAMPAGNE', $campagne);

        return (int) $qb->getQuery()->getSingleScalarResult();
    }
}

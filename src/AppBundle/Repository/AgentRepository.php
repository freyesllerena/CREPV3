<?php

namespace AppBundle\Repository;

use AppBundle\Entity\CampagneBrhp;
use AppBundle\Entity\Agent;
use AppBundle\Entity\Campagne;
use AppBundle\Entity\CampagnePnc;
use AppBundle\EnumTypes\EnumStatutCampagne;
use AppBundle\Entity\CampagneRlc;
use AppBundle\Entity\PerimetreBrhp;
use AppBundle\Entity\PerimetreRlc;
use AppBundle\Entity\Perimetre;
use AppBundle\EnumTypes\EnumStatutCrep;
use AppBundle\Traits\ConditionsFiltre;
use AppBundle\EnumTypes\EnumStatutValidationAgent;
use AppBundle\Entity\Utilisateur;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\EntityRepository;


/**
 * AgentRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AgentRepository extends EntityRepository
{
    // Utilisation de trait
    use ConditionsFiltre;

    public function getShdsByCampagneBrhp(CampagneBrhp $campagneBrhp)
    {
        $qb = $this->createQueryBuilder('a');

        $qb->select('shd')
        ->from('AppBundle:Agent', 'shd')
        ->where('a.campagneBrhp = :CAMPAGNE_BRHP')
        ->setParameter('CAMPAGNE_BRHP', $campagneBrhp)
        ->andWhere('shd.id = a.shd');

        return $qb->getQuery()->getResult();
    }

    public function getEmailsShdsByCampagne(CampagneBrhp $campagneBrhp)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->join('a.shd', 'shd')
        ->select('shd.email')
        ->distinct()
        ->where('a.campagneBrhp = :CAMPAGNE_BRHP')
        ->setParameter('CAMPAGNE_BRHP', $campagneBrhp);

        $emailsShd = $qb->getQuery()->getResult();

        $tabEmailsShd = array('@');

        foreach ($emailsShd as $emailShd) {
            $tabEmailsShd[] = $emailShd['email'];
        }

        return $tabEmailsShd;
    }

    public function getAhByCampagneBrhp(CampagneBrhp $campagneBrhp)
    {
        $qb = $this->createQueryBuilder('a');

        $qb->select('ah')
        ->from('AppBundle:Agent', 'ah')
        ->where('a.campagneBrhp = :CAMPAGNE_BRHP')
        ->setParameter('CAMPAGNE_BRHP', $campagneBrhp)
        ->andWhere('ah.id = a.ah')
        ->andWhere('a.evaluable = :EVALUABLE')
        ->setParameter('EVALUABLE', true)
        ;

        return $qb->getQuery()->getResult();
    }

    public function getEmailsAhsByCampagne(CampagneBrhp $campagneBrhp)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->join('a.ah', 'ah')
        ->select('ah.email')
        ->distinct()
        ->where('a.campagneBrhp = :CAMPAGNE_BRHP')
        ->setParameter('CAMPAGNE_BRHP', $campagneBrhp);

        $emailsAh = $qb->getQuery()->getResult();

        $tabEmailsAh = array('@');

        foreach ($emailsAh as $emailAh) {
            $tabEmailsAh[] = $emailAh['email'];
        }

        return $tabEmailsAh;
    }

    public function getAgentsByShd(Agent $shd, $campagneBrhp)
    {
        $qb = $this->createQueryBuilder('a')
        ->where('a.campagneBrhp = :CAMPAGNE_BRHP')
        ->andWhere('a.shd = :SHD')
        ->setParameter('CAMPAGNE_BRHP', $campagneBrhp)
        ->setParameter('SHD', $shd);

        return $qb->getQuery()->getResult();
    }

    /**
     * Récupère les agents liés à une campagne brhp.
     *
     * @param CampagneBrhp $campagneBrhp
     */
    public function getAgentsByCampagne(CampagneBrhp $campagneBrhp)
    {
        $qb = $this->createQueryBuilder('a')
            ->where('a.campagneBrhp = :CAMPAGNE_BRHP')
            ->setParameter('CAMPAGNE_BRHP', $campagneBrhp);

        return $qb->getQuery()->getResult();
    }

    public function getEmailsAgentsByCampagne(CampagneBrhp $campagneBrhp)
    {
        $qb = $this->createQueryBuilder('a')
        ->select('a.email')
        ->where('a.campagneBrhp = :CAMPAGNE_BRHP')
        ->andWhere('a.evaluable = :EVALUABLE')
        ->setParameter('CAMPAGNE_BRHP', $campagneBrhp)
        ->setParameter('EVALUABLE', true);

        return $qb->getQuery()->getResult();
    }

    /**
     * Supprimer les agents liés à une campagne Pnc.
     *
     * @param CampagnePnc $campagnePnc
     */
    public function deleteAgentByCampagnePnc(CampagnePnc $campagnePnc)
    {
        // On commence par supprimer les relations agent <-> shd et agent <-> ah
        $qb = $this->_em->createQueryBuilder();

        $qb->update('AppBundle:Agent', 'a')
        ->set('a.shd', '?1')
        ->set('a.ah', '?1')
        ->where('a.campagnePnc = :CAMPAGNE_PNC')
        ->setParameter(1, null)
        ->setParameter('CAMPAGNE_PNC', $campagnePnc)
        ->getQuery()
        ->execute();

        // Puis on lance la requête de suppression
        $qb = $this->createQueryBuilder('a')
        ->delete('AppBundle:Agent', 'a')
        ->where('a.campagnePnc = :CAMPAGNE_PNC')
        ->setParameter('CAMPAGNE_PNC', $campagnePnc);

        $qb->getQuery()->execute();
    }

    public function getAgentByEmail($email, $campagne)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->where('a.email = :EMAIL');

        if ($campagne instanceof CampagnePnc) {
            $qb->andWhere('a.campagnePnc = :CAMPAGNE');
        } elseif ($campagne instanceof CampagneRlc) {
            $qb->andWhere('a.campagneRlc = :CAMPAGNE');
        } elseif ($campagne instanceof CampagneBrhp) {
            $qb->andWhere('a.campagneBrhp = :CAMPAGNE');
        }

        $qb->setParameter('EMAIL', $email)
        ->setParameter('CAMPAGNE', $campagne);

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function getAgentsByAh(Agent $ah, $campagneBrhp)
    {
        $qb = $this->createQueryBuilder('a')
        ->where('a.campagneBrhp = :CAMPAGNE_BRHP')
        ->andWhere('a.ah = :AH')
        ->andWhere('a.evaluable = :EVALUABLE')
        ->setParameter('CAMPAGNE_BRHP', $campagneBrhp)
        ->setParameter('AH', $ah)
        ->setParameter('EVALUABLE', true);

        return $qb->getQuery()->getResult();
    }

    public function getAgentsEvaluables($campagneBrhp)
    {
        $qb = $this->createQueryBuilder('agent');
        $qb
        ->select('agent.id as a_id, agent.email as a_email, agent.civilite as a_civilite, agent.nom as a_nom, agent.prenom as a_prenom')
        ->addSelect('agent.affectation as a_affectation, agent.statutValidation as a_statutValidation, agent.erreurSignalee as a_erreurSignalee, agent.commentaireValidation as a_commentaireValidation, agent.sansAh as a_sansAh')
        ->addSelect('shd.id as shd_id, shd.email as shd_email, shd.civilite as shd_civilite, shd.nom as shd_nom, shd.prenom as shd_prenom')
        ->addSelect('ah.id as ah_id, ah.civilite as ah_civilite, ah.nom as ah_nom, ah.prenom as ah_prenom, ah.email as ah_email')
        ->innerJoin('agent.shd', 'shd')
        ->leftJoin('agent.ah', 'ah')
        ->where('agent.campagneBrhp = :CAMPAGNE_BRHP')
        ->andWhere('agent.evaluable = :EVALUABLE')
        ->orderBy('shd.nom')
        ->addOrderBy('shd.prenom')
        ->addOrderBy('agent.nom')
        ->addOrderBy('agent.prenom')
        ->setParameter('CAMPAGNE_BRHP', $campagneBrhp)
        ->setParameter('EVALUABLE', true);

        $reslut = $qb->getQuery()->getScalarResult();

        return $reslut;
    }

    //Récupère la liste des évaluateurs potentiels pour un Agent $agentAEvaluer donné
    public function getEvaluateurs(CampagnePnc $campagnePnc, Agent $agentAEvaluer)
    {
        $qb = $this->createQueryBuilder('a')
        ->select('a.id')
        ->addSelect('a.email')
        ->where('a.campagnePnc = :CAMPAGNE_PNC')
        ->setParameter('CAMPAGNE_PNC', $campagnePnc);

        if ($agentAEvaluer->getId()) {
            $qb->andWhere('a.id != :AGENT_A_EVALUER_ID')
            ->setParameter('AGENT_A_EVALUER_ID', $agentAEvaluer->getId());
        }

        return $qb->getQuery()->getScalarResult();
    }

    public function getNbAgentsEvaluables(Campagne $campagne, $perimetresRlc = [], $perimetresBrhp = [], Agent $shd = null, Agent $ah = null, $categories = [], $affectations = [], $corps = [])
    {
        if ($shd && $ah) {
            throw new \Exception('Appel incorrect SHD ou AH');
        }

        $qb = $this->createQueryBuilder('agent')
                    ->select('COUNT(agent)')
                    ->andWhere('agent.evaluable = :EVALUABLE')
                    ->setParameter('EVALUABLE', true);

        $this->addFiltreCategories($qb, $categories);
        $this->addFiltreAffectations($qb, $affectations);
        $this->addFiltreCorps($qb, $corps);

        if ($campagne instanceof CampagnePnc) {
            $qb->andWhere('agent.campagnePnc = :CAMPAGNE');

            $this->addFiltrePerimetresRlc($qb, $perimetresRlc);
            $this->addFiltrePerimetresBrhp($qb, $perimetresBrhp);
        } elseif ($campagne instanceof CampagneRlc) {
            $qb->andWhere('agent.campagneRlc = :CAMPAGNE');

            /* @var $perimetre PerimetreRlc */
//             if ($perimetre) {
//                 $qb->leftJoin('agent.campagneBrhp', 'campagneBrhp')
//                 ->andWhere('campagneBrhp.perimetreBrhp = :PERIMETRE_BRHP')
//                 ->setParameter('PERIMETRE_BRHP', $perimetre);
//             }
            $this->addFiltrePerimetresBrhp($qb, $perimetresBrhp);
        } elseif ($campagne instanceof CampagneBrhp) {
            $qb->andWhere('agent.campagneBrhp = :CAMPAGNE');
            if ($shd) {
                $qb->andWhere('agent.shd = :SHD')
                ->setParameter('SHD', $shd);
            } elseif ($ah) {
                $qb->andWhere('agent.ah = :AH')
                ->setParameter('AH', $ah);
            }
        }

        $qb->setParameter('CAMPAGNE', $campagne);

        return (int) $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * Récupère les agents liés à une campagne rlc et à un périmpètre Brhp donné.
     *
     * @param CampagneRlc $campagneRlc
     */
    public function getAgentsByCampagneRlc(CampagneRlc $campagneRlc, PerimetreBrhp $perimetreBrhp = null)
    {
        $qb = $this->createQueryBuilder('a');

        $qb->leftJoin('a.campagneBrhp', 'campagneBrhp')
        ->leftJoin('campagneBrhp.campagneRlc', 'campagneRlc')
        ->where('campagneRlc = :CAMPAGNE_RLC');

        if ($perimetreBrhp) {
            $qb->andWhere('a.perimetreBrhp = :PERIMETRE_BRHP')
            ->setParameter('PERIMETRE_BRHP', $perimetreBrhp);
        }

        $qb->setParameter('CAMPAGNE_RLC', $campagneRlc);

        return $qb->getQuery()->getResult();
    }

    /**
     * Récupère les agents liés à un périmpètre Brhp donné.
     *
     * @param PerimetreBrhp $perimetreBrhp
     */
    public function getAgentsByPerimetreBrhp(PerimetreBrhp $perimetreBrhp, CampagnePnc $campagnePnc)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->leftJoin('a.uniteOrganisationnelle', 'uo')
        ->leftJoin('uo.perimetreBrhp', 'perimetreBrhp')
        ->where('perimetreBrhp = :PERIMERTE_BRHP')
        ->setParameter('PERIMERTE_BRHP', $perimetreBrhp)
        ->andWhere('a.campagnePnc = :CAMPAGNE_PNC')
        ->setParameter('CAMPAGNE_PNC', $campagnePnc);

        return $qb->getQuery()->getResult();
    }

    /**
     * @param Campagne $campagne
     * @param unknown  $evaluable     : 0=non_evaluable, 1=evaluable, 2=(evaluable + non_evaluable)
     * @param unknown  $sansShd       : 1=true, 0=false
     * @param unknown  $sansPerimetre : 1=true, 0=false, 2=(true + false)
     * @param unknown  $search        : chaine saisie dans le champ recherche
     * @param number   $page
     * @param string   $max
     * @param string   $getResult
     * @param number   $columnOrder
     * @param string   $dirOrder
     */
    public function dataTableServerProcessing(Campagne $campagne, array $colonnesRecherche, array $colonnesTri, $perimetre, $evaluable, $sansShd, $sansPerimetre, $search, $page = 0, $max = null, $getResult = true, $columnOrder = 0, $dirOrder = 'asc')
    {
        $qb = $this->initQueryBuilder($campagne, $colonnesRecherche, $perimetre, $evaluable, $sansShd, $sansPerimetre, $search);

        $nbColonnesTri = count($colonnesTri);

        $colonnesTri = array_map('str_replace', array_fill(0, $nbColonnesTri, 'crep.statut'), array_fill(0, $nbColonnesTri, 'crep_statut'), $colonnesTri);

        if ('asc' == strtolower($dirOrder)) {
            $ordreStatutNull = 100;
        } else {
            $ordreStatutNull = 0;
        }

        $qb->addSelect('campagneBrhp')
        ->addSelect('perimetreBrhp')
        ->addSelect('shd')
        ->addSelect('ah')
        ->addSelect('perimetreRlc')
        ->addSelect('uniteOrganisationnelle')
        ->addSelect('crep')
        ->addSelect("(case
		                      when crep.statut = '".EnumStatutCrep::CREE."' then 1
                		      when crep.statut = '".EnumStatutCrep::MODIFIE_SHD."' then 2 
                		      when crep.statut = '".EnumStatutCrep::SIGNE_SHD."' then 3 
                		      when crep.statut = '".EnumStatutCrep::VISE_AGENT."' then 4 
                		      when crep.statut = '".EnumStatutCrep::REFUS_VISA_AGENT."' then 5 
                		      when crep.statut = '".EnumStatutCrep::SIGNE_AH."' then 6 
                		      when crep.statut = '".EnumStatutCrep::NOTIFIE_AGENT."' then 7 
                    		  when crep.statut = '".EnumStatutCrep::REFUS_NOTIFICATION_AGENT."' then 8 
                    		  when crep.statut = '".EnumStatutCrep::CAS_ABSENCE."' then 9
                    		  when crep.statut = '".EnumStatutCrep::REFUS_EP."' then 10 
		                      ELSE ".$ordreStatutNull.' END) as HIDDEN crep_statut');

        // ordres
        $qb->orderBy($colonnesTri[$columnOrder], $dirOrder);

        // pagination
        if ($max) {
            $preparedQuery = $qb->getQuery()
            ->setMaxResults($max)
            ->setFirstResult($page * $max);
        } else {
            $preparedQuery = $qb->getQuery();
        }

        return $preparedQuery->getResult();
    }

    /**
     * @param Campagne  $campagne
     * @param Perimetre $perimetre
     * @param unknown   $evaluable     : 0=non_evaluable, 1=evaluable, 2=(evaluable + non_evaluable)
     * @param unknown   $sansShd       : 1=true, 0=false, 2=Agents avec SHD
     * @param unknown   $sansPerimetre : 1=true, 0=false
     * @param unknown   $search        : chaine saisie dans le champ recherche
     *
     * @return mixed
     */
    public function countAgentsByCampagne(Campagne $campagne, array $colonnes = [], $perimetre = null, $evaluable = 2, $sansShd = 0, $sansPerimetre = 0, $search = null)
    {
        $qb = $this->initQueryBuilder($campagne, $colonnes, $perimetre, $evaluable, $sansShd, $sansPerimetre, $search);

        $qb->select('count(agent)');

        return $qb->getQuery()->getSingleScalarResult();
    }

    private function initQueryBuilder(Campagne $campagne, array $colonnesRecherche, $perimetre, $evaluable, $sansShd, $sansPerimetre, $search)
    {
        $qb = $this->createQueryBuilder('agent');

        $qb->leftJoin('agent.campagneBrhp', 'campagneBrhp')
        ->leftJoin('campagneBrhp.perimetreBrhp', 'perimetreBrhp')
        ->leftJoin('perimetreBrhp.perimetreRlc', 'perimetreRlc')
        ->leftJoin('agent.shd', 'shd')
        ->leftJoin('agent.ah', 'ah')
        ->leftJoin('agent.uniteOrganisationnelle', 'uniteOrganisationnelle')
        ->leftJoin('agent.crep', 'crep');

        if ($campagne instanceof CampagnePnc) {
            $qb->andWhere('agent.campagnePnc = :CAMPAGNE');
            $qb->setParameter('CAMPAGNE', $campagne);
            if (1 == $sansPerimetre) {
                $qb->andWhere('agent.perimetreRlc IS NULL');
            }
        } elseif ($campagne instanceof CampagneRlc) {
            $qb->andWhere('agent.campagneRlc = :CAMPAGNE');
            $qb->setParameter('CAMPAGNE', $campagne);
            if (1 == $sansPerimetre) {
                $qb->andWhere('agent.perimetreBrhp IS NULL');
            }
        } elseif ($campagne instanceof CampagneBrhp) {
            //$qb->andWhere('agent.campagneBrhp = :CAMPAGNE');

            if (1 == $sansPerimetre) {
                $qb->andWhere(
                        $qb->expr()->orX(
                                $qb->expr()->andX(
                                        $qb->expr()->eq('agent.perimetreRlc', $campagne->getCampagneRlc()->getPerimetreRlc()->getId()),
                                        $qb->expr()->isNull('agent.perimetreBrhp'),
                                        $qb->expr()->eq('agent.campagnePnc', $campagne->getCampagneRlc()->getCampagnePnc()->getId())
                                ),
                                $qb->expr()->andX(
                                        $qb->expr()->eq('agent.campagnePnc', $campagne->getCampagneRlc()->getCampagnePnc()->getId()),
                                        $qb->expr()->isNull('agent.perimetreRlc')
                                )
                        )
                );
            } elseif (2 == $sansPerimetre) {
                $qb->andWhere(
                    $qb->expr()->orX(
                        $qb->expr()->andX(
                            $qb->expr()->eq('agent.perimetreRlc', $campagne->getCampagneRlc()->getPerimetreRlc()->getId()),
                            $qb->expr()->isNull('agent.perimetreBrhp'),
                            $qb->expr()->eq('agent.campagnePnc', $campagne->getCampagneRlc()->getCampagnePnc()->getId())
                        ),
                        $qb->expr()->andX(
                            $qb->expr()->eq('agent.campagnePnc', $campagne->getCampagneRlc()->getCampagnePnc()->getId()),
                            $qb->expr()->isNull('agent.perimetreRlc')
                        ),
                        $qb->expr()->eq('agent.campagneBrhp', $campagne->getId())
                    )
                );
            } else {
                $qb->andWhere('agent.campagneBrhp = :CAMPAGNE');
                $qb->setParameter('CAMPAGNE', $campagne);
            }
        }

        if ($perimetre instanceof PerimetreRlc) {
            $qb->andWhere('agent.perimetreRlc = :PERIMETRE_RLC')
            ->setParameter('PERIMETRE_RLC', $perimetre);
        } elseif ($perimetre instanceof PerimetreBrhp) {
            $qb->andWhere('agent.perimetreBrhp = :PERIMETRE_BRHP')
            ->setParameter('PERIMETRE_BRHP', $perimetre);
        }

        if (2 != $evaluable) {
            $qb->andWhere('agent.evaluable = :EVALUABLE')
            ->setParameter('EVALUABLE', 1 == $evaluable);
        }

        if (1 == $sansShd) {
            $qb->andWhere('agent.shd IS NULL');
        }

        if ($search) {
            // Si search est un tableau, donc il s'agit d'un multi filtre
            if (!empty($search) && is_array($search)) {
                $this->addMultiFiltre($qb, $search);

            // Sinon il s'agit d'une recherche générale avec mot clé
            } else {
                $search = trim($search);

                $orX = $qb->expr()->orX();
                $conditionsLike = array();

                foreach ($colonnesRecherche as $colonne) {
                    $conditionsLike[] = $qb->expr()->like($colonne, ':search');
                }

                $orX->addMultiple($conditionsLike);

                $qb->andWhere($orX);

                $qb->setParameter('search', '%'.$search.'%');
            }
        }

        $qb->getQuery()->setResultCacheLifetime(5);

        return $qb;
    }

    /**
     * Ajouter les conditions nécessaires aux multi filtres sur les datables.
     *
     * @param QueryBuilder $qb
     * @param array        $search
     */
    private function addMultiFiltre(QueryBuilder $qb, $search)
    {
        foreach ($search as $key => $value) {
            $value = trim($value);

            switch ($key) {
                case 'agent':
                    $orX = $qb->expr()->orX();
                    $conditionsLike = array();

                    $conditionsLike[] = $qb->expr()->like('agent.nom', ':'.$key);
                    $conditionsLike[] = $qb->expr()->like('agent.prenom', ':'.$key);
                    $conditionsLike[] = $qb->expr()->like('CONCAT(agent.civilite, \' \', agent.prenom, \' \', agent.nom) ', ':'.$key);
                    $conditionsLike[] = $qb->expr()->like('CONCAT(agent.civilite, \' \', agent.nom, \' \', agent.prenom) ', ':'.$key);

                    $orX->addMultiple($conditionsLike);

                    $qb->andWhere($orX);

                    $qb->setParameter($key, '%'.$value.'%');
                    break;

                case 'perimetreRlc':
                    $qb->andWhere('perimetreRlc.libelle LIKE :'.$key);

                    $qb->setParameter($key, '%'.$value.'%');
                    break;

                case 'perimetreBrhp':
                    $qb->andWhere('perimetreBrhp.libelle LIKE :'.$key);

                    $qb->setParameter($key, '%'.$value.'%');
                    break;

                case 'shd':
                    $orX = $qb->expr()->orX();
                    $conditionsLike = array();

                    $conditionsLike[] = $qb->expr()->like('shd.nom', ':'.$key);
                    $conditionsLike[] = $qb->expr()->like('shd.prenom', ':'.$key);
                    $conditionsLike[] = $qb->expr()->like('CONCAT(shd.civilite, \' \', shd.prenom, \' \', shd.nom) ', ':'.$key);
                    $conditionsLike[] = $qb->expr()->like('CONCAT(shd.civilite, \' \', shd.nom, \' \', shd.prenom) ', ':'.$key);

                    $orX->addMultiple($conditionsLike);

                    $qb->andWhere($orX);

                    $qb->setParameter($key, '%'.$value.'%');
                    break;

                case 'ah':
                    $orX = $qb->expr()->orX();
                    $conditionsLike = array();

                    $conditionsLike[] = $qb->expr()->like('ah.nom', ':'.$key);
                    $conditionsLike[] = $qb->expr()->like('ah.prenom', ':'.$key);
                    $conditionsLike[] = $qb->expr()->like('CONCAT(ah.civilite, \' \', ah.prenom, \' \', ah.nom) ', ':'.$key);
                    $conditionsLike[] = $qb->expr()->like('CONCAT(ah.civilite, \' \', ah.nom, \' \', ah.prenom) ', ':'.$key);

                    $orX->addMultiple($conditionsLike);

                    $qb->andWhere($orX);

                    $qb->setParameter($key, '%'.$value.'%');
                    break;

                case 'evaluable':
                    $qb->andWhere('agent.evaluable = :EVALUABLE');
                    $qb->setParameter('EVALUABLE', 1 == $value);
                    break;

                case 'email':
                    $qb->andWhere('agent.email LIKE :'.$key);
                    $qb->setParameter($key, '%'.$value.'%');
                    break;

                case 'avancement':
                    $this->addFiltreAvancementCrep($qb, $value);
                    break;

                case 'uniteOrganisationnelle':
                    $orX = $qb->expr()->orX();
                    $conditionsLike = array();

                    $conditionsLike[] = $qb->expr()->like('uniteOrganisationnelle.libelle', ':'.$key);
                    $conditionsLike[] = $qb->expr()->like('uniteOrganisationnelle.code', ':'.$key);

                    $orX->addMultiple($conditionsLike);

                    $qb->andWhere($orX);

                    $qb->setParameter($key, '%'.$value.'%');
                    break;

                case 'affectation':
                    $qb->andWhere('agent.affectation LIKE :'.$key);
                    $qb->setParameter($key, '%'.$value.'%');
                    break;

                case 'statutValidation':
                    $this->addFiltreStatutValidation($qb, $value);
            }
        }
    }

    /**
     * Ajouter les conditions sur le statut d'avancement d'un CREP au $qb (pour les multi filtres).
     *
     * @param QueryBuilder $qb
     * @param string       $value :
     */
    private function addFiltreAvancementCrep(QueryBuilder $qb, $value)
    {
        switch ($value) {
            case '0':
                $qb->andWhere('agent.crep IS NULL');
                break;
            case '1':
                $orX = $qb->expr()->orX();
                $conditions = array();

                $conditions[] = $qb->expr()->in('crep.statut', [EnumStatutCrep::CREE, EnumStatutCrep::MODIFIE_SHD]);
                $orX->addMultiple($conditions);
                $qb->andWhere($orX);
                break;

            case '2':
                $qb->andWhere('crep.statut = :STATUT ');
                $qb->setParameter('STATUT', EnumStatutCrep::SIGNE_SHD);
                break;

            case '3':
                $qb->andWhere('crep.statut = :STATUT ');
                $qb->setParameter('STATUT', EnumStatutCrep::VISE_AGENT);
                break;

            case '4':
                $qb->andWhere('crep.statut = :STATUT ');
                $qb->setParameter('STATUT', EnumStatutCrep::REFUS_VISA_AGENT);
                break;

            case '5':
                $qb->andWhere('crep.statut = :STATUT ');
                $qb->setParameter('STATUT', EnumStatutCrep::SIGNE_AH);
                break;

            case '6':
                $qb->andWhere('crep.statut = :STATUT ');
                $qb->setParameter('STATUT', EnumStatutCrep::NOTIFIE_AGENT);
                break;

            case '7':
                $qb->andWhere('crep.statut = :STATUT ');
                $qb->setParameter('STATUT', EnumStatutCrep::REFUS_NOTIFICATION_AGENT);
                break;
            case '8':
                $qb->andWhere('crep.statut = :STATUT ');
                $qb->setParameter('STATUT', EnumStatutCrep::CAS_ABSENCE);
                break;
        }
    }

    /**
     * Ajouter les conditions sur le statut de validation d'un agent par son N+1 au $qb (pour les multi filtres).
     *
     * @param QueryBuilder $qb
     * @param string       $value :
     */
    private function addFiltreStatutValidation(QueryBuilder $qb, $value)
    {
    	//dump("addFiltreStatutValidation : ". $value);
    	
        $qb->andWhere('agent.evaluable = 1');
        switch ($value) {
            case '0':
            	
            	// AND (statutValidation = EN_COURS OR statutValidation IS NULL)
            	$qb->andWhere(
            		$qb->expr()->orX(
            			$qb->expr()->like('agent.statutValidation', ':STATUT'),
             			$qb->expr()->isNull('agent.statutValidation')
            		)
            	);
            	$qb->setParameter('STATUT', EnumStatutValidationAgent::EN_COURS);
                break;
            case '1':
                $qb->andWhere('agent.statutValidation = :STATUT');
                $qb->setParameter('STATUT', EnumStatutValidationAgent::VALIDE);
                break;

            case '2':
                $qb->andWhere('agent.statutValidation = :STATUT');
                $qb->setParameter('STATUT', EnumStatutValidationAgent::ERREUR_SIGNALEE);
                break;

            case '3':
                $qb->andWhere('agent.statutValidation = :STATUT');
                $qb->setParameter('STATUT', EnumStatutValidationAgent::REJETE);
                break;
        }
    }

    /**
     * Renvoie l'ensemble des agents ayant un CREP finalisé pour un rôle donné.
     */
    public function getAgentsAyantCrepFinalise(CampagneBrhp $campagne, $role, $evaluateur)
    {
        $qb = $this->createQueryBuilder('agent')
        ->leftJoin('agent.crep', 'crep')
        ->where('agent.campagneBrhp = :CAMPAGNE')
        ->andWhere('crep.statut IN (:STATUTS)');

        if ('ROLE_SHD' == $role) {
            $qb->andWhere('agent.shd = :SHD')
            ->setParameter('SHD', $evaluateur);
        } elseif ('ROLE_AH' == $role) {
            $qb->andWhere('agent.ah = :AH')
            ->setParameter('AH', $evaluateur);
        }

        $qb->setParameter('CAMPAGNE', $campagne)
        ->setParameter('STATUTS', array(EnumStatutCrep::NOTIFIE_AGENT,
                                        EnumStatutCrep::REFUS_NOTIFICATION_AGENT,
                                        EnumStatutCrep::CAS_ABSENCE,
        ));

        return $qb->getQuery()->getResult();
    }

    /**
     * Renvoie le nombre d'agents ayant un CREP finalisé pour un rôle donné.
     */
    public function getNbAgentsAyantCrepFinalise(CampagneBrhp $campagne, $role, $evaluateur)
    {
        $qb = $this->createQueryBuilder('agent')
        ->select('COUNT(agent)')
        ->leftJoin('agent.crep', 'crep')
        ->where('agent.campagneBrhp = :CAMPAGNE')
        ->andWhere('crep.statut IN (:STATUTS)');

        if ('ROLE_SHD' == $role) {
            $qb->andWhere('agent.shd = :SHD')
            ->setParameter('SHD', $evaluateur);
        } elseif ('ROLE_AH' == $role) {
            $qb->andWhere('agent.ah = :AH')
            ->setParameter('AH', $evaluateur);
        }

        $qb->setParameter('CAMPAGNE', $campagne)
        ->setParameter('STATUTS', array(EnumStatutCrep::NOTIFIE_AGENT,
                                        EnumStatutCrep::REFUS_NOTIFICATION_AGENT,
                                        EnumStatutCrep::CAS_ABSENCE,
        ));

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function searchAgent(CampagnePnc $campagnePnc, $search, $agent_id)
    {
        $search = trim($search);

        $qb = $this->createQueryBuilder('a')
        ->select('a.id')
        ->addSelect('a.email')
        ->where('a.campagnePnc = :CAMPAGNE_PNC')
        ->andWhere('a.email LIKE :SEARCH')
        ->andWhere('a.id <> :AGENT_ID')
        ->setParameter('CAMPAGNE_PNC', $campagnePnc)
        ->setParameter('AGENT_ID', $agent_id)
        ->setParameter('SEARCH', '%'.$search.'%');

        return $qb->getQuery()->getScalarResult();
    }

    public function isAh($emailAh, CampagneBrhp $campagneBrhp)
    {
        $qb = $this->createQueryBuilder('agent');

        $qb->innerJoin('agent.ah', 'ah')
        ->select('ah.id')
        ->where('agent.campagneBrhp = :CAMPAGNE_BRHP')
        ->andWhere('ah.email = :EMAIL_AH')
        ->setParameter('CAMPAGNE_BRHP', $campagneBrhp)
        ->setParameter('EMAIL_AH', $emailAh)
        ->setMaxResults(1);

        $result = $qb->getQuery()->getScalarResult();

        return !empty($result);
    }

    public function isShd(Utilisateur $shd, CampagneBrhp $campagneBrhp)
    {
        $qb = $this->createQueryBuilder('agent');

        $qb->innerJoin('agent.shd', 'shd')
        ->select('shd.id')
        ->where('agent.campagneBrhp = :CAMPAGNE_BRHP')
        ->andWhere('shd.utilisateur = :SHD')
        ->setParameter('CAMPAGNE_BRHP', $campagneBrhp)
        ->setParameter('SHD', $shd)
        ->setMaxResults(1);

        $result = $qb->getQuery()->getScalarResult();

        return !empty($result);
    }

    public function detacherAgentsDunBrhp($uoEnMoins)
    {
        if (empty($uoEnMoins)) {
            return;
        }

        $ministere = $uoEnMoins[key($uoEnMoins)]->getMinistere(); // au lieu de $uoEnMoins[0]

        $subQb = $this->_em->createQueryBuilder();
        $subQb
            ->select('campagneBrhp')
            ->from('AppBundle:CampagneBrhp', 'campagneBrhp')
            ->leftJoin('campagneBrhp.campagneRlc', 'campagneRlc')
            ->leftJoin('campagneRlc.campagnePnc', 'campagnePnc')
            ->where('campagneBrhp.statut IN (:STATUTS)')
            ->andWhere('campagnePnc.ministere = :MINISTERE')
            ->setParameter('STATUTS', [EnumStatutCampagne::CREEE, EnumStatutCampagne::OUVERTE, EnumStatutCampagne::INITIALISEE])
            ->setParameter('MINISTERE', $ministere);

        $campagnesBrhp = $subQb->getQuery()->getResult();

        $qb = $this->_em->createQueryBuilder();

        $qb->update('AppBundle:Agent', 'a')
        ->set('a.campagneBrhp', '?1')
        ->set('a.perimetreBrhp', '?1')
        ->set('a.campagneRlc', '?1')
        ->set('a.perimetreRlc', '?1')
        ->where('a.campagneBrhp IN (:CAMPAGNES_BRHP)')
        ->andWhere('a.uniteOrganisationnelle IN (:UOS_EN_MOINS)')
        ->setParameter(1, null)
        ->setParameter('UOS_EN_MOINS', $uoEnMoins)
        ->setParameter(':CAMPAGNES_BRHP', $campagnesBrhp)
        ->getQuery()->execute();
    }

    public function rattacherAgentsAUnBrhp($uoEnPlus)
    {
        if (empty($uoEnPlus)) {
            return;
        }

        // Récupération du perimetreBrhp
        // Surtout ne pas utiliser $uoEnPlus[0] car l'indice 0 peut ne pas exister
        $premiereUo = $uoEnPlus[key($uoEnPlus)];
        $perimetreBrhp = $premiereUo->getPerimetreBrhp();

        $qb = $this->_em->createQueryBuilder();
        $qb->select('campagneBrhp')
        ->from('AppBundle:CampagneBrhp', 'campagneBrhp')
        ->where('campagneBrhp.statut IN (:STATUTS)')
        ->andWhere('campagneBrhp.perimetreBrhp = :PERIMETRE_BRHP')
        ->setParameter('STATUTS', [EnumStatutCampagne::CREEE, EnumStatutCampagne::OUVERTE, EnumStatutCampagne::INITIALISEE])
        ->setParameter('PERIMETRE_BRHP', $perimetreBrhp);

        $campagnesBrhp = $qb->getQuery()->getResult();

        /* @var $campagneBrhp CampagneBrhp */
        foreach ($campagnesBrhp as $campagneBrhp) {
            $qb = $this->_em->createQueryBuilder();
            $query = $qb->update('AppBundle:Agent', 'a')
            ->set('a.campagneBrhp', '?1')
            ->set('a.perimetreBrhp', '?2')
            ->set('a.campagneRlc', '?3')
            ->set('a.perimetreRlc', '?4')
            ->where('a.campagnePnc = :CAMPAGNE_PNC')
            ->andWhere('a.uniteOrganisationnelle IN (:UOS_EN_PLUS)')
            ->setParameter(1, $campagneBrhp)
            ->setParameter(2, $perimetreBrhp)
            ->setParameter(3, $campagneBrhp->getCampagneRlc())
            ->setParameter(4, $perimetreBrhp->getPerimetreRlc())
            ->setParameter('UOS_EN_PLUS', $uoEnPlus)
            ->setParameter('CAMPAGNE_PNC', $campagneBrhp->getCampagnePnc())
            ->getQuery();

            $query->execute();
        }
    }

    public function exportDonneesAgents(CampagnePnc $campagnePnc)
    {
        $qb = $this->createQueryBuilder('agent');
        $qb
        ->select('agent.matricule, agent.civilite, agent.nomNaissance, agent.nom, agent.nomMarital, agent.prenom')
        ->addSelect('agent.email, agent.dateNaissance, agent.categorieAgent, agent.corps, agent.dateEntreeCorps')
        ->addSelect('agent.grade, agent.dateEntreeGrade, agent.echelon, agent.dateEntreeEchelon, agent.gradeEmploi, agent.dateEntreeGradeEmploi')
        ->addSelect('agent.etablissement, agent.departement, agent.affectation, agent.affectationClairAgent, agent.posteOccupe')
        ->addSelect('agent.dateEntreePosteOccupe, agent.codeSirh1, agent.codeSirh2, agent.capitalDif, agent.capitalDifMobilisable')
        ->addSelect('shd.email as shd_email, ah.email as ah_email, agent.evaluable, agent.motifNonEvaluation, agent.codeUo')
        ->leftJoin('agent.shd', 'shd')
        ->leftJoin('agent.ah', 'ah')
        ->where('agent.campagnePnc = :CAMPAGNE_PNC')
        ->setParameter('CAMPAGNE_PNC', $campagnePnc);
        $reslut = $qb->getQuery()->getScalarResult();

        return $reslut;
    }

    /**
     * Récupérer les catégories/affectations/corps (en fonction du paramètre $colonne) des agents d'une campagne PNC.
     *
     * @param CampagnePnc $campagnePnc
     */
//     public function getColonneByCampagnePnc($colonne, $libelleColonne, CampagnePnc $campagnePnc)
//     {
//         $qb = $this->createQueryBuilder('agent');

//         $qb->select('agent.' . $colonne)
//         ->distinct()
//         ->where('agent.campagnePnc = :CAMPAGNE_PNC')
//         ->andWhere('agent.' . $colonne . ' IS NOT NULL')
//         ->setParameter('CAMPAGNE_PNC', $campagnePnc)
//         ->indexBy('agent', 'agent.' . $colonne);

//         $result = [];

//         $queryResult = $qb->getQuery()->getArrayResult();

//         foreach ($queryResult as $key=>$value){
//             $result[$key] = $key;
//         }

//         $result['(Sans '.$libelleColonne.')'] = null;
//         return $result ;
//     }

    /**
     * Récupérer les catégories/affectations/corps (en fonction du paramètre $colonne) des agents d'une campagne PNC, RLC ou BRHP.
     *
     * @param Campagne $campagne
     */
    public function getColonneByCampagne($colonne, $libelleColonne, Campagne $campagne)
    {
        $qb = $this->createQueryBuilder('agent');

        $qb->select('agent.'.$colonne)
        ->distinct()
        ->where('agent.'.$colonne.' IS NOT NULL');

        if ($campagne instanceof CampagnePnc) {
            $qb->where('agent.campagnePnc = :CAMPAGNE');
        } elseif ($campagne instanceof CampagneRlc) {
            $qb->andWhere('agent.campagneRlc = :CAMPAGNE');
        } elseif ($campagne instanceof CampagneBrhp) {
            $qb->andWhere('agent.campagneBrhp = :CAMPAGNE');
        }

        $qb->setParameter('CAMPAGNE', $campagne)
        ->indexBy('agent', 'agent.'.$colonne);

        $result = [];

        $queryResult = $qb->getQuery()->getArrayResult();

        foreach ($queryResult as $key => $value) {
            $result[$key] = $key;
        }

        $result['(Sans '.$libelleColonne.')'] = null;

        return $result;
    }
}

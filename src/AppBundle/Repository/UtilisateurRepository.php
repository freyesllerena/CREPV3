<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Ministere;

/**
 * UtilisateurRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UtilisateurRepository extends \Doctrine\ORM\EntityRepository
{
    public function getRlc(Ministere $ministere)
    {
        $qb = $this->createQueryBuilder('u')
            ->where('u.ministere = :MINISTERE')
            ->andWhere('u.roles LIKE :ROLES')
            ->andWhere('u.enabled = :ENABLED')
            ->setParameter('MINISTERE', $ministere)
            ->setParameter('ROLES', '%"ROLE_RLC"%')
            ->setParameter('ENABLED', true);

        return $qb->getQuery()->getResult();
    }

    public function getPnc(Ministere $ministere)
    {
        $qb = $this->createQueryBuilder('u')
        ->where('u.ministere = :MINISTERE')
        ->andWhere('u.roles LIKE :ROLES')
        ->andWhere('u.enabled = :ENABLED')
        ->setParameter('MINISTERE', $ministere)
        ->setParameter('ROLES', '%"ROLE_PNC"%')
        ->setParameter('ENABLED', true);

        return $qb->getQuery()->getResult();
    }

    public function getAdminsMin(Ministere $ministere)
    {
        $qb = $this->createQueryBuilder('u')
        ->where('u.ministere = :MINISTERE')
        ->andWhere('u.roles LIKE :ROLES')
        ->andWhere('u.enabled = :ENABLED')
        ->setParameter('MINISTERE', $ministere)
        ->setParameter('ROLES', '%"ROLE_ADMIN_MIN"%')
        ->setParameter('ENABLED', true);

        return $qb->getQuery()->getResult();
    }

    public function dataTableServerProcessing($search, $page = 0, $max = null, $getResult = true, $columnOrder = 1, $dirOrder = 'asc', Ministere $ministere = null)
    {
        $orders = array(
                'u.civilite',
                'u.nom',
                'u.prenom',
                'u.email',
                'm.libelleCourt',
                'u.enabled',
                'u.locked',
                'u.lastLogin',
        );

        $qb = $this->createQueryBuilder('u');

        $qb->leftJoin('u.ministere', 'm');

        if ($ministere) {
            //Si l'action de tri est demandée par un admin min, la colonne libelleCourt du ministère n'est pas prise en compte
            $orders = array(
                    'u.civilite',
                    'u.nom',
                    'u.prenom',
                    'u.email',
                    'u.enabled',
                    'u.locked',
                    'u.lastLogin',
            );

            $qb
                ->andWhere('u.ministere = :MINISTERE')
                ->setParameter('MINISTERE', $ministere);
        }

        // recherches
        if ($search) {
            $search = trim($search);

            $orX = $qb->expr()->orX();
            $conditionsLike = array();

            $conditionsLike[] = $qb->expr()->like('u.civilite', ':search');
            $conditionsLike[] = $qb->expr()->like('u.nom', ':search');
            $conditionsLike[] = $qb->expr()->like('u.prenom', ':search');
            $conditionsLike[] = $qb->expr()->like('u.email', ':search');
            $conditionsLike[] = $qb->expr()->like('m.libelleCourt', ':search');

            $orX->addMultiple($conditionsLike);

            $qb->andWhere($orX);

            $qb->setParameter('search', '%'.$search.'%');
        }

        // ordres
        $qb->orderBy($orders[$columnOrder], $dirOrder);

        // pagination
        if ($max) {
            $preparedQuery = $qb->getQuery()
            ->setMaxResults($max)
            ->setFirstResult($page * $max);
        } else {
            $preparedQuery = $qb->getQuery();
        }

        return $getResult ? $preparedQuery->getResult() : $preparedQuery;
    }

    public function searchUtilisateur($search)
    {
        $search = trim($search);

        $qb = $this->createQueryBuilder('u')
        ->select('u.id')
        ->addSelect('u.email')
        ->where('u.email LIKE :SEARCH')
        ->setParameter('SEARCH', '%'.$search.'%');

        return $qb->getQuery()->getScalarResult();
    }

    public function countUtilisateurs($search, Ministere $ministere = null)
    {
        $qb = $this->createQueryBuilder('u');
        $qb->select('count(u)');

        $qb->leftJoin('u.ministere', 'm');

        if ($ministere) {
            $qb
            ->andWhere('u.ministere = :MINISTERE')
            ->setParameter('MINISTERE', $ministere);
        }

        // recherches
        if ($search) {
            $search = trim($search);

            $orX = $qb->expr()->orX();
            $conditionsLike = array();

            $conditionsLike[] = $qb->expr()->like('u.civilite', ':search');
            $conditionsLike[] = $qb->expr()->like('u.nom', ':search');
            $conditionsLike[] = $qb->expr()->like('u.prenom', ':search');
            $conditionsLike[] = $qb->expr()->like('u.email', ':search');
            $conditionsLike[] = $qb->expr()->like('m.libelleCourt', ':search');

            $orX->addMultiple($conditionsLike);

            $qb->andWhere($orX);

            $qb->setParameter('search', '%'.$search.'%');
        }

        return $qb->getQuery()->getSingleScalarResult();
    }
}

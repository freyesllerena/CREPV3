{% extends "crep/crepMcc02/mcc02.base.html.twig" %}

{% block accueil %} {% endblock %}
{% block campagne %} active {% endblock %}

{% block content %}

{% if errors| length > 0 %}
<div class="alert alert-danger alert-dismissible fade in" role="alert">
    <strong>Le formulaire de CREP n'est pas valide.</strong><br>
	Veuillez rectifier votre saisie.
</div>
{% endif %}

{{ form_start(form, {'attr': {'novalidate': 'novalidate', 'class': 'form-horizontal'}}) }}
    {{ parent() }}
    {{ block('bouton_enregistrer') }}
    {{ form_widget(form._token) }}
{{ form_end(form, {'render_rest': false}) }}
{% endblock content %}

{% block i01 %}
    {% include 'crep/crepMcc02/_include/edit/0/1.html.twig' %}
{% endblock i01 %}

{% block i02 %}
	{% include 'crep/crepMcc02/_include/edit/0/2.html.twig' %}
{% endblock i02 %}

{% block i1 %}
    {% include 'crep/crepMcc02/_include/edit/i/1.html.twig' %}
{% endblock i1 %}

{% block i2 %}
    {% include 'crep/crepMcc02/_include/edit/i/2.html.twig' %}
{% endblock i2 %}

{% block i3 %}
    {% include 'crep/crepMcc02/_include/edit/i/3.html.twig' %}
{% endblock i3 %}

{% block ii1 %}
	{% include 'crep/crepMcc02/_include/edit/ii/1.html.twig' %}
{% endblock ii1 %}

{% block ii2 %}
    {% include 'crep/crepMcc02/_include/edit/ii/2.html.twig' %}
{% endblock ii2 %}

{% block ii3 %}
    {% include 'crep/crepMcc02/_include/edit/ii/3.html.twig' %}
{% endblock ii3 %}

{% block ii4 %}
    {% include 'crep/crepMcc02/_include/edit/ii/4.html.twig' %}
{% endblock ii4 %}

{% block iii1 %}
    {% include 'crep/crepMcc02/_include/edit/iii/1.html.twig' %}
{% endblock iii1 %}

{% block iii2 %}
    {% include 'crep/crepMcc02/_include/edit/iii/2.html.twig' %}
{% endblock iii2 %}

{% block iii3 %}
    {% include 'crep/crepMcc02/_include/edit/iii/3.html.twig' %}
{% endblock iii3 %}

{% block iv1 %}
    {% include 'crep/crepMcc02/_include/edit/iv/1.html.twig' %}
{% endblock iv1 %}

{% block iv2 %}
    {% include 'crep/crepMcc02/_include/edit/iv/2.html.twig' %}
{% endblock iv2 %}

{% block viError %}
    {% for errorIndex, error in errors %}
        {% if errorIndex == 0 %}
            {% if (error.messageParameters['cause_formation'] is defined and error.messageParameters['cause_formation'] == "annee" ) %}
                <div class="alert alert-danger alert-dismissible fade in" role="alert">
                    <strong><i class="fa fa-warning"></i> {{ error.message }}</strong><br>
                </div>
            {% endif %}
        {% endif %}
    {% endfor %}
{% endblock viError %}

{% block v1 %}
    {% include 'crep/crepMcc02/_include/edit/v/1.html.twig' %}
{% endblock v1 %}

{% block v2 %}
    {% include 'crep/crepMcc02/_include/edit/v/2.html.twig' %}
{% endblock v2 %}

{% block vi1 %}
    {% include 'crep/crepMcc02/_include/edit/vi/1.html.twig' %}
{% endblock vi1 %}

{% block vi2_1 %}
    {% include 'crep/crepMcc02/_include/edit/vi/2_1.html.twig' %}
{% endblock vi2_1 %}

{% block vi2_2 %}
    {% include 'crep/crepMcc02/_include/edit/vi/2_2.html.twig' %}
{% endblock vi2_2 %}

{% block vi2_3 %}
    {% include 'crep/crepMcc02/_include/edit/vi/2_3.html.twig' %}
{% endblock vi2_3 %}

{% block vii1 %}
    {% include 'crep/crepMcc02/_include/edit/vii/1.html.twig' %}
{% endblock vii1 %}

{% block vii2 %}
    {% include 'crep/crepMcc02/_include/edit/vii/2.html.twig' %}
{% endblock vii2 %}

{% block vii3 %}
    {% include 'crep/crepMcc02/_include/edit/vii/3.html.twig' %}
{% endblock vii3 %}

{% block viii1 %}
    {% include 'crep/crepMcc02/_include/edit/viii/1.html.twig' %}
{% endblock viii1 %}

{% block viii2 %}
    {% include 'crep/crepMcc02/_include/edit/viii/2.html.twig' %}
{% endblock viii2 %}

{% block viii3 %}
    {% include 'crep/crepMcc02/_include/edit/viii/3.html.twig' %}
{% endblock viii3 %}

{% block viii4 %}
    {% include 'crep/crepMcc02/_include/edit/viii/4.html.twig' %}
{% endblock viii4 %}

{% block viii5 %}
    {{ parent() }}
{% endblock viii5 %}

{% block javascripts %}
    {{ parent() }}
    <!-- chained -->
    <script src="{{ asset('js/chained.js') }}"></script>
    <script type="text/javascript">

        $(document).ready(function() {

            var crepCollections = new Crep.Collections();

            var libelleEmploiFonctionnel = $("#crep_mcc02_libelleEmploiFonctionnel");
            var groupeEmploiFonctionnel = $("#crep_mcc02_groupeEmploiFonctionnel");

            isCacheBloc(libelleEmploiFonctionnel, groupeEmploiFonctionnel);


            if ($("#crep_mcc02_emploiFonctionnel_0") && $("#crep_mcc02_emploiFonctionnel_1")) {
                if ($("#crep_mcc02_emploiFonctionnel_0").attr('checked')) {
                    isCacheBloc(libelleEmploiFonctionnel, groupeEmploiFonctionnel, false);
                }
            }

            $("#crep_mcc02_emploiFonctionnel_0").on('ifChanged', function(){
                isCacheBloc(libelleEmploiFonctionnel, groupeEmploiFonctionnel, false);
            });

            $("#crep_mcc02_emploiFonctionnel_1").on('ifChanged', function(){
                isCacheBloc(libelleEmploiFonctionnel, groupeEmploiFonctionnel);
                libelleEmploiFonctionnel.val('');
                groupeEmploiFonctionnel.val('');
            });

            // I Fiche de poste
            var pointsActualisesFichePoste = $("#crep_mcc02_pointsActualisesFichePoste");
            isCacheBloc(pointsActualisesFichePoste);

            if ($("#crep_mcc02_fichePosteAdaptee_0") && $("#crep_mcc02_fichePosteAdaptee_1")) {
                if ($("#crep_mcc02_fichePosteAdaptee_0").attr('checked')) {
                    isCacheBloc(pointsActualisesFichePoste);
                }
                if ($("#crep_mcc02_fichePosteAdaptee_1").attr('checked')) {
                    isCacheBloc(pointsActualisesFichePoste, false, false);
                }
            }

            $("#crep_mcc02_fichePosteAdaptee_0").on('ifChanged', function(){
                isCacheBloc(pointsActualisesFichePoste);
                pointsActualisesFichePoste.val('');
            });

            $("#crep_mcc02_fichePosteAdaptee_1").on('ifChanged', function(){
                isCacheBloc(pointsActualisesFichePoste, false, false);
            });
        });

        //Fonction permettant de cacher ou non un bloc selon un choix de button radio
        function isCacheBloc(id1, id2 = false, isHide = true){
            var label1 = id1.parent().parent().find('label');
            if (id2) {
                var label2 = id2.parent().parent().find('label');
            }

            if (isHide) {
                label1.hide();
                id1.hide();
                if (id2) {
                    label2.hide();
                    id2.hide();
                }
            }else {
                label1.show();
                id1.show();
                if (id2) {
                    label2.show();
                    id2.show();
                }
            }
        }

        // memeService
        eventOnCheckbowChild("crep_mcc02_mobilitePoste_memeService",  'crep_mcc02_mobilitePoste', 'crep_mcc02_changementPoste');
        // memeMinistere
        eventOnCheckbowChild("crep_mcc02_mobilitePoste_memeMinistere",  'crep_mcc02_mobilitePoste', 'crep_mcc02_changementPoste');
        // autreMinistere
        eventOnCheckbowChild("crep_mcc02_mobilitePoste_autreMinistere",  'crep_mcc02_mobilitePoste', 'crep_mcc02_changementPoste');
        // autreFonctionPublique
        eventOnCheckbowChild("crep_mcc02_mobilitePoste_autreFonctionPublique",  'crep_mcc02_mobilitePoste', 'crep_mcc02_changementPoste');
        // autreProjet
        eventOnCheckbowChild("crep_mcc02_mobilitePoste_autreProjet",  'crep_mcc02_mobilitePoste', 'crep_mcc02_changementPoste');

        /**
         * Control si tout le groupe checkbox est false
         *
         * @param aItems
         * @returns {boolean}
         */
        function isCheckboxChecked(aItems) {
            var statutParentCheckbox = false;
            for (var i = 0; i < aItems.length; i++) {
                var htmlData = jQuery(  '#' + aItems[i].id  );
                var isChecked = htmlData.find('input');

                statusCheckbox = isChecked.prevObject[0].checked;
                if (statusCheckbox === true) {
                    statutParentCheckbox = true;
                }
            }

            return statutParentCheckbox;
        }

        /**
         * Evenement checked ou unchecked sur le checkbox enfant
         *
         * @param childID
         * @param divChildID
         * @param parentID
         */
        function eventOnCheckbowChild(childID,  divChildID, parentID) {
            jQuery('#'+childID).on('ifChanged', function() {
                var allItems = jQuery('#'+divChildID).find(':checkbox').first().siblings();
                var aItems = [];
                allItems.each(function() {
                    listeCheckbox = allItems.find(':checkbox').first().siblings();
                    aItems = listeCheckbox.prevObject.prevObject.prevObject.prevObject.prevObject;
                });
                // control statut sur tous les checkboxs
                var parentStatut = isCheckboxChecked(aItems);

                if (jQuery(this).is(':checked')) {
                    var isChecked = true;
                    for (var i = 0; i < aItems.length; i++) {
                        if (childID === aItems[i].id) {
                            jQuery(  '#' + aItems[i].id  ).parent().addClass('checked');
                            if (parentStatut) {
                                jQuery('#'+parentID).parent().addClass('checked');
                            }
                        }
                    }

                } else {
                    for (var i = 0; i < aItems.length; i++) {
                        if (childID === aItems[i].id) {
                            jQuery(  '#' + aItems[i].id  ).parent().removeClass('checked');
                            if (parentStatut === false) {
                                jQuery('#'+parentID).parent().removeClass('checked');
                            }
                        }
                    }
                }
            });
        }

        //Mcc02 autocomplete pour formation suivie - voir version globale : \app\Resources\views\crep\crep.base.html.twig
        urlAjax = "{{ path('formation_ajax_search', {'ministere': crep.agent.campagnePnc.ministere.id}) }}";
        // AutoComplete
        autoCompleteFormation();

        function autoCompleteFormation(){
            console.log('trtrtr');
            $('.formation-autocomplete').autocomplete({
                serviceUrl: urlAjax,
                minChars: 3,
                onSelect: function (suggestion) {
                    // var mcc02DureeFormation =  $(this).closest('td').next('td').next('td').find('input').show();
                    var mcc02DureeFormation =  $(this).parent().parent().parent().parent().closest('div').next('div').find('input').show();
                    // console.log(mcc02DureeFormation);
                    mcc02DureeFormation.val(suggestion.duree);
                }
            });

            $('.formation-autocomplete').change(function(){
                 if (!$(this).val()) {
                    var mcc02DureeFormation =  $(this).parent().parent().parent().parent().closest('div').next('div').find('input').show();
                    mcc02DureeFormation.val('');
                }
            });
        }

        // crud composants entité
        // prototype fonction CREP
        /**
         * Permet de recupérer le button ajouter associé au prototype
         *
         *  "<button class="btn btn-primary add_collection_mcc02_link competencesPostes pull-right">"
         *  "       <i class="fa fa-plus"></i> Ajouter
         *  "</button>"
         *
         * @param {HTMLDivElement} container la div containant le container
         * @return {HTMLDivElement}  retourne le bouton
         */
        function findAddButton(container) {
            var btn = $(container)
                .next()
                .find("button.add_collection_mcc02_link");

            return (btn.length > 0) ? btn : null;
        }

        var Crep = Crep || {};
        Crep.CollectionsMcc02 = CollectionsMcc02;

        $(function() {
            var crepCollectionsMcc02 = new Crep.CollectionsMcc02();
        });

        /**
         * Classe Collections
         * classe permettant la génération de collection pour
         * tous type de formulaire
         *
         * @param {Dom} containerCollection est votre balise ou id qui contient le data-prototype
         * @param {String} containerCollection est votre balise ou id qui contient le data-prototype
         */
        function CollectionsMcc02 () {

            var collectionsPrototypes = $('div.row[data-prototype]');
            var collectionCount = collectionsPrototypes.length, i;

            $('.btn.remove-from-collection_mcc02').on('click', function (e) {
                e.preventDefault();
                remove(this);
                $('#btnAddObjectifsPasses').show();
                $('#btnAddObjectifsFuturs').show();
            });

            for (i = 0; i < collectionCount; i++) {
                // definir l'index de départ avec le nombre d'élément présent dans la collection
                var collection = $(collectionsPrototypes[i]);
                var index = collection.find("table > tbody > tr").length;
                collection.data('index', index);
                var button = findAddButton(collectionsPrototypes[i]);
                if (button != null) {
                    button.on('click', function (e) {
                        e.preventDefault();
                        add(this);
                        // Récupérer l'id de la div qui contient la table du prototype
                        divTableId = $(this).parent().parent().prev().attr('id');
                        // Récupérer la dernière ligne ajoutée
                        lastTr = $("#" + divTableId + " > div > table > tbody > tr:last");
                        autoCompleteFormation();
                        // eligibleDifFormation('crep_minef_abc_formationsDemandeesAgent_');
                        // eligibleDifFormation('crep_ac_formationsDemandeesAgent_');
                        miseEnformeChamps(lastTr);
                    });
                }
            }
        }

        function add(element) {
            elementCollectionPrototype =  $(element)
                .parent() // remonte au premier noeud parent
                .parent() // remonte au second noeud parent
                .prev();   // prend le précédent noeud frère
            table = elementCollectionPrototype.find("table");

            if (table.length > 0) {
                prototype = elementCollectionPrototype.data('prototype');
                index = elementCollectionPrototype.data('index');
                _form = prototype.replace(/__name__/g, index);
                elementCollectionPrototype.data('index', index + 1);
                tbody = table.find("tbody");
                tbody.append(_form);
                //EligibleDif
                input = $('tr:last input.dif', tbody);
                select = $('tr:last input.eligible-dif', tbody);
                eligibleDifformationAjout(input, select);
                divElement = $(element).parent().parent().parent().parent().parent().parent().closest('tr');
                //Mettre à jour l'ensemble des id et name des éléments du prototype
                miseAjourIndex(divElement, tbody);
                elementCollectionPrototype.on('click', '.btn.remove-from-collection_mcc02', function(e) {
                    e.preventDefault();
                    remove(this, tbody);
                });
            }
        }

        function remove(element, tbody) {
            //Récupérer la div (collection) à supprimer
            divElement = $(element).parent().parent().parent().parent().parent().parent().closest('tr');
            divElement.remove();
            miseAjourIndex(divElement, tbody);
        }

        function miseAjourIndex(tbody) {
            newIndex = 0;
            //On met à jour les id pour ne pas avoir de décalage entre eux (ex: si on supprime un proto,
            //on remet les index depuis 0, 1, 2 ... au lieu de 0,2,6...) pour ne pas avoir de problème avec l'affichage des erreurs validators
            $(divElement, tbody).each(function () {
                $('td:not(:last)', $(this)).each(function () {
                    element = $(this).find('.fieldCollection');
                    //Récupérer le name à mettre à jour
                    nomAMettreAJour = element.attr('name');
                      //S'il n'y a pas de name donc c'est le bouton remove du prototype, on ne fait rien
                     if(typeof nomAMettreAJour !== 'undefined'){
                         tab = nomAMettreAJour.split('[');
                        //Reconstruire le name avec le nouvel indice
                        tab[1] = '[' + tab[1];
                        tab[2] = '[' + newIndex +']';
                        tab[3] = '[' + tab[3];
                        //newName = tab[0] + tab[1] + tab[2] + tab[3]
                        newName = tab.join("");
                        element.attr('name' , newName);
                        //Reconstruire l'id
                        tabId = element.attr('id').split('_');
                        //On récupère l'index qui est l'avant dernier élement
                        tabId[ tabId.length - 2 ] = newIndex;
                        newId = tabId.join("_");
                        element.attr('id' , newId);
                     }
                });
                newIndex++;
            })
        }

        /*
         * Fonction qui reçoit un élément <tr> et applique une mise en forme sur les icheck, datePicker et select2 sur ses champs
         * @param tr : element
         *
         */
        function miseEnformeChamps(tr) {
            // Mise en forme des boutons radio et des checkBox en icheck
            tr.iCheck({
                checkboxClass: 'icheckbox_flat-green',
                radioClass: 'iradio_flat-green'
            });
        }

    </script>
{% endblock javascripts %}

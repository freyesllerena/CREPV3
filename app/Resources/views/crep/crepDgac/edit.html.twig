{% extends "crep/crepDgac/dgac.base.html.twig" %}
{# {% form_theme form 'crep/crepMj01/Form/App_form_crepMj01.html.twig' %}#}

{% block accueil %}
{% endblock %}

{% block campagne %} active {% endblock %}

{% block content %}
    
    {{ form_start(form, {'attr': {'novalidate': 'novalidate', 'class': 'form-horizontal'}}) }}
    {{ parent() }}
    {{ block('bouton_enregistrer') }}
    {{ form_widget(form._token) }}
    {{ form_end(form, {'render_rest': false}) }}
    
{% endblock content %}


{% block i01 %}
    {% include 'crep/crepDgac/_include/edit/0/1.html.twig' %}
{% endblock i01 %}

{% block i02 %}
    {% include 'crep/crepDgac/_include/edit/0/2.html.twig' %}
{% endblock i02 %}

{% block i1 %}
    {% include 'crep/crepDgac/_include/edit/i/1.html.twig' %}
{% endblock i1 %}

{% block i2 %}
    {% include 'crep/crepDgac/_include/edit/i/2.html.twig' %}
{% endblock i2 %}

{% block i3 %} 
    {% include 'crep/crepDgac/_include/edit/i/3.1.html.twig' %}
    {% include 'crep/crepDgac/_include/edit/i/3.2.html.twig' %}
{% endblock i3 %} 

{% block ii1 %}
    {% include 'crep/crepDgac/_include/edit/ii/1.html.twig' %}
{% endblock ii1 %}

{% block ii2 %}
    {% include 'crep/crepDgac/_include/edit/ii/2.html.twig' %}
{% endblock ii2 %}

{% block iii1 %}
    {% include 'crep/crepDgac/_include/edit/iii/1.html.twig' %}
{% endblock iii1 %}

{% block iii2 %}
    {% include 'crep/crepDgac/_include/edit/iii/2.1.html.twig' %}
    {% include 'crep/crepDgac/_include/edit/iii/2.2.html.twig' %}
{% endblock iii2 %}

{% block iv1 %}
    {% include 'crep/crepDgac/_include/edit/iv/1.html.twig' %}
{% endblock iv1 %}

{% block iv2 %}
    {% include 'crep/crepDgac/_include/edit/iv/2.1.html.twig' %}
    {% include 'crep/crepDgac/_include/edit/iv/2.2.html.twig' %}
{% endblock iv2 %}

{% block v1 %}
    {% include 'crep/crepDgac/_include/edit/v/1.html.twig' %}
{% endblock v1 %}

{% block v2 %}
    {% include 'crep/crepDgac/_include/edit/v/2.html.twig' %}
{% endblock v2 %}

{% block v3 %}
    {% include 'crep/crepDgac/_include/edit/v/3.html.twig' %}
{% endblock v3 %}

{% block v4 %}
 {% include 'crep/crepDgac/_include/edit/v/4.html.twig' %}
{% endblock v4 %}

{% block v5 %}
    {% include 'crep/crepDgac/_include/edit/v/5.html.twig' %}
{% endblock v5 %}

{% block v6 %}
 {% include 'crep/crepDgac/_include/edit/v/6.html.twig' %}
{% endblock v6 %}

{% block vi1 %}
 {% include 'crep/crepDgac/_include/edit/vi/1.html.twig' %}
{% endblock vi1 %}

{% block vi2 %}
    {% include 'crep/crepDgac/_include/edit/vi/2.html.twig' %}
{% endblock vi2 %}

{% block vii1 %}
    {% include 'crep/crepDgac/_include/edit/vii/1.html.twig' %}
{% endblock vii1 %}

{% block vii2 %}
    {% include 'crep/crepDgac/_include/edit/vii/2.html.twig' %}
{% endblock vii2 %}

{% block vii3 %}
    {% include 'crep/crepDgac/_include/edit/vii/3.html.twig' %}
{% endblock vii3 %}

{% block vii4 %}
    {% include 'crep/crepDgac/_include/edit/vii/4.html.twig' %}
{% endblock vii4 %}

{% block viii1 %}
    {% include 'crep/crepDgac/_include/edit/viii/1.html.twig' %}
{% endblock viii1 %}

{% block viii2 %}
    {% include 'crep/crepDgac/_include/edit/viii/2.html.twig' %}
{% endblock viii2 %}

{% block viii3 %}
    {% include 'crep/crepDgac/_include/edit/viii/3.html.twig' %}
{% endblock viii3 %}

{% block viii4 %}
    {% include 'crep/crepDgac/_include/edit/viii/4.html.twig' %}
{% endblock viii4 %}


{% block circuitDeValidation %} {% endblock circuitDeValidation %} {%
block javascripts %} {{ parent() }}
<!-- chained -->
<script src="{{ asset('js/chained.js') }}"></script>
<script type="text/javascript">

        $(document).ready(function () {
            // Cette ligne sert à initialiser les collections, et doit nécessairement être en début du ready.
            // Dans le cas contraire, une erreur dans le JS empêcherait les collections de fonctionner
            var crepCollections = new Crep.Collections();
            

            // VII Formations suivies lors de l'année écoulée
            var demarrageMobilite = $("#crep_dgac_demarrageMobiliteSouhaitee");
            var asouhitMobilite = $("#crep_dgac_souhaitMobilite");
            var mobilitePoste01 = $("#mobilite-poste-01");
            var mobilitePoste02 = $("#mobilite-poste-02");
            
            if (asouhitMobilite) {
                if ($(asouhitMobilite).attr('checked')) {
                    demarrageMobilite.show();
                    mobilitePoste01.show();
                    mobilitePoste02.show();
                } else {
                    demarrageMobilite.hide();
                    mobilitePoste01.hide();
                    mobilitePoste02.hide();
                }
            }
            
            //
            asouhitMobilite.on('ifChanged', function(){
                var div1 = asouhitMobilite.parent();
                
                if (div1.prevObject[0].checked == true) {
                    demarrageMobilite.show();
                    mobilitePoste01.show();
                    mobilitePoste02.show();
                } else {
                    demarrageMobilite.hide();
                    mobilitePoste01.hide();
                    mobilitePoste02.hide();
                    // démarrage
                    var allItems = jQuery(demarrageMobilite).find('div').find('div').find(':radio');
                    var idsRadio = [];

                    $.each( allItems, function( key, value ) {
                        idsRadio[key] = value.id;
                    });

                    for (var i = 0; i < idsRadio.length; i++) {
                        $( "#"+idsRadio[i] ).removeAttr('checked');
                        $( "#"+idsRadio[i] ).parent().removeClass('checked');
                    }
                    // mobilitePoste01
                    var allItems01 = jQuery(mobilitePoste01).find('div').find('div').find(':checkbox');
                    var idsCheckbox01 = [];

                    $.each( allItems01, function( key, value ) {
                        idsCheckbox01[key] = value.id;
                    });

                    for (var i = 0; i < idsCheckbox01.length; i++) {
                        $( "#"+idsCheckbox01[i] ).removeAttr('checked');
                        $( "#"+idsCheckbox01[i] ).parent().removeClass('checked');
                    }
                    // mobilitePoste02
                    var allItems02 = jQuery(mobilitePoste02).find('div').find('div').find(':checkbox');
                    var idsCheckbox02 = [];

                    $.each( allItems02, function( key, value ) {
                        idsCheckbox02[key] = value.id;
                    });

                    for (var i = 0; i < idsCheckbox02.length; i++) {
                        $( "#"+idsCheckbox02[i] ).removeAttr('checked');
                        $( "#"+idsCheckbox02[i] ).parent().removeClass('checked');
                    }
                }
            });
        });






        // crud composants entité
        // prototype fonction CREP
        /**
         * Permet de recupérer le button ajouter associé au prototype
         *
         *  "<button class="btn btn-primary add_collection_mcc02_link competencesPostes pull-right">"
         *  "       <i class="fa fa-plus"></i> Ajouter
         *  "</button>"
         *
         * @param {HTMLDivElement} container la div containant le container
         * @return {HTMLDivElement}  retourne le bouton
         */
        function findAddButton(container) {
            var btn = $(container)
                .next()
                .find("button.add_collection_mcc02_link");

            return (btn.length > 0) ? btn : null;
        }

        /**  Autres evenements **/

        var Crep = Crep || {};
        Crep.CollectionsDgac = CollectionsDgac;

        $(function() {
            var crepCollectionsDgac = new Crep.CollectionsDgac();
        });

        /**
         * Classe Collections
         * classe permettant la génération de collection pour
         * tous type de formulaire
         *
         * @param {Dom} containerCollection est votre balise ou id qui contient le data-prototype
         * @param {String} containerCollection est votre balise ou id qui contient le data-prototype
         */
        function CollectionsDgac () {
            var collectionsPrototypes = $('div.row[data-prototype]');
            var collectionCount = collectionsPrototypes.length, i;

            $('.btn.remove-from-collection_dgac').on('click', function (e) {
                e.preventDefault();
                remove(this);
                $('#btnAddObjectifsPasses').show();
                $('#btnAddObjectifsFuturs').show();
            });

            for (i = 0; i < collectionCount; i++) {
                // definir l'index de départ avec le nombre d'élément présent dans la collection
                var collection = $(collectionsPrototypes[i]);
                var index = collection.find("table > tbody > tr").length;
                collection.data('index', index);
                var button = findAddButton(collectionsPrototypes[i]);
                if (button != null) {
                    button.on('click', function (e) {
                        e.preventDefault();
                        add(this);
                        // Récupérer l'id de la div qui contient la table du prototype
                        divTableId = $(this).parent().parent().prev().attr('id');
                        // Récupérer la dernière ligne ajoutée
                        lastTr = $("#" + divTableId + " > div > table > tbody > tr:last");
                        autoCompleteFormation();
                        miseEnformeChamps(lastTr);
                    });
                }
            }
        }

        function add(element) {
            elementCollectionPrototype =  $(element)
                .parent() // remonte au premier noeud parent
                .parent() // remonte au second noeud parent
                .prev();   // prend le précédent noeud frère
            table = elementCollectionPrototype.find("table");

            if (table.length > 0) {
                prototype = elementCollectionPrototype.data('prototype');
                index = elementCollectionPrototype.data('index');
                _form = prototype.replace(/__name__/g, index);
                elementCollectionPrototype.data('index', index + 1);
                tbody = table.find("tbody");
                tbody.append(_form);
                //EligibleDif
                input = $('tr:last input.dif', tbody);
                select = $('tr:last input.eligible-dif', tbody);
                eligibleDifformationAjout(input, select);
                divElement = $(element).parent().parent().parent().parent().parent().parent().closest('tr');
                //Mettre à jour l'ensemble des id et name des éléments du prototype
                miseAjourIndex(divElement, tbody);
                elementCollectionPrototype.on('click', '.btn.remove-from-collection_mcc02', function(e) {
                    e.preventDefault();
                    remove(this, tbody);
                });
            }
        }

        function remove(element, tbody) {
            //Récupérer la div (collection) à supprimer
            divElement = $(element).parent().parent().parent().parent().parent().parent().closest('tr');
            divElement.remove();
            miseAjourIndex(divElement, tbody);
        }

        function miseAjourIndex(tbody) {
            newIndex = 0;
            //On met à jour les id pour ne pas avoir de décalage entre eux (ex: si on supprime un proto,
            //on remet les index depuis 0, 1, 2 ... au lieu de 0,2,6...) pour ne pas avoir de problème avec l'affichage des erreurs validators
            $(divElement, tbody).each(function () {
                $('td:not(:last)', $(this)).each(function () {
                    element = $(this).find('.fieldCollection');
                    //Récupérer le name à mettre à jour
                    nomAMettreAJour = element.attr('name');
                    //S'il n'y a pas de name donc c'est le bouton remove du prototype, on ne fait rien
                    if(typeof nomAMettreAJour !== 'undefined'){
                        tab = nomAMettreAJour.split('[');
                        //Reconstruire le name avec le nouvel indice
                        tab[1] = '[' + tab[1];
                        tab[2] = '[' + newIndex +']';
                        tab[3] = '[' + tab[3];
                        //newName = tab[0] + tab[1] + tab[2] + tab[3]
                        newName = tab.join("");
                        element.attr('name' , newName);
                        //Reconstruire l'id
                        tabId = element.attr('id').split('_');
                        //On récupère l'index qui est l'avant dernier élement
                        tabId[ tabId.length - 2 ] = newIndex;
                        newId = tabId.join("_");
                        element.attr('id' , newId);
                    }
                });
                newIndex++;
            })
        }

        /*
         * Fonction qui reçoit un élément <tr> et applique une mise en forme sur les icheck, datePicker et select2 sur ses champs
         * @param tr : element
         *
         */
        function miseEnformeChamps(tr) {
            // Mise en forme des boutons radio et des checkBox en icheck
            tr.iCheck({
                checkboxClass: 'icheckbox_flat-green',
                radioClass: 'iradio_flat-green'
            });
        }


        // crud composants entité
        // prototype fonction CREP
        /**
         * Permet de recupérer le button ajouter associé au prototype
         *
         *  "<button class="btn btn-primary add_collection_mcc02_link competencesPostes pull-right">"
         *  "       <i class="fa fa-plus"></i> Ajouter
         *  "</button>"
         *
         * @param {HTMLDivElement} container la div containant le container
         * @return {HTMLDivElement}  retourne le bouton
         */
        function findAddButton(container) {
            var btn = $(container)
                .next()
                .find("button.add_collection_dgac_link");

            return (btn.length > 0) ? btn : null;
        }

        //Mcc02 autocomplete pour formation suivie - voir version globale : \app\Resources\views\crep\crep.base.html.twig
        urlAjax = "{{ path('formation_ajax_search', {'ministere': crep.agent.campagnePnc.ministere.id}) }}";
        // AutoComplete
        autoCompleteFormation();

        function autoCompleteFormation(){

            $('.formation-autocomplete').autocomplete({
                serviceUrl: urlAjax,
                minChars: 3,
                onSelect: function (suggestion) {
                    var idLibelle = $(this).context.id;
                    var result = idLibelle.split('_');
                    var idDuree = result[0] + '_' + result[1] + '_' + result[2] + '_' + result[3] + '_duree';
                    $("#"+idDuree).val(suggestion.duree);
                }
            });

            $('.formation-autocomplete').change(function(){
                if (!$(this).val()) {
                    var idLibelle = $(this).context.id;
                    var result = idLibelle.split('_');
                    var idDuree = result[0] + '_' + result[1] + '_' + result[2] + '_' + result[3] + '_duree';
                    $("#"+idDuree).val('');
                }
            });
        }
    </script>

{% endblock javascripts %}
